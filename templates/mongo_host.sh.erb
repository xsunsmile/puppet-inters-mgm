#!/usr/bin/ruby

require 'rubygems'
require 'mongo'
require 'socket'
require 'facter'

operation = ARGV.shift
@torque_home = "<%= torque_home %>"
mongo_host = "<%= mongo_host %>"
torque_spool_dir = "<%= torque_spool_dir %>"
torque_spool_dir = "/var/spool/torque" unless torque_spool_dir.size > 0
torque_nodes_file = torque_spool_dir + "/server_priv/nodes"
hosts_db = "inters_hosts"

conn = Mongo::Connection.new( mongo_host )
db = conn.db( hosts_db )
hosts_coll = db.collection("hosts")

def put( hosts_coll )
    hostname = ARGV.shift
    hostname = Socket.gethostname unless hostname
    hostname_s = hostname.split(/\./).first
    hostent = Socket.gethostbyname( hostname )
    hostip = hostent[3].unpack("C4").join('.')
    host_info = hosts_coll.find_one( "name" => hostname_s )
    np = Facter.value(:processorcount) || `cat /proc/cpuinfo | grep -c processor`.sub(/\n/,'')
    architecture = Facter.value(:architecture) || `arch`.sub(/\n/,'')
    if host_info
      if host_info['ip'] != hostip
        hosts_coll.update({"_id" => host_info["_id"]},
          {"$set" => {"namef" => "#{hostname_s}.#{`hostname -d`.sub(/\n/,'')}"}})
        hosts_coll.update({"_id" => host_info["_id"]},
          {"$set" => {"ip" => hostip}})
        hosts_coll.update({"_id" => host_info["_id"]},
          {"$set" => {"np" => np}})
        hosts_coll.update({"_id" => host_info["_id"]},
          {"$set" => {"changed" => 1}})
        hosts_coll.update({"_id" => host_info["_id"]},
          {"$set" => {"arch" => architecture}})
      end
    else
      new_host = {
        "name" => hostname_s,
        "namef" => "#{hostname_s}.#{`hostname -d`.sub(/\n/,'')}",
        "ip" => hostip,
        "np" => np,
        "changed" => 0,
        "arch" => architecture,
      }
      hosts_coll.insert( new_host )
    end
end

def get( hosts_coll )
    get_arg, result = ARGV.shift, ''
    case get_arg
      when 'all'
        result = hosts_coll.find().collect{ |it| it["name"] }
      else
        prop = ARGV.shift
        host_info = hosts_coll.find_one( "name" => get_arg )
        result = host_info["#{prop}"] if host_info
    end
    puts result
end

def sync_to_torque( hosts_coll, torque_nodes_file )
    nodes_file = open(torque_nodes_file)
    nodes = nodes_file.read.split(/\n/)
    nodes_file.close
    hosts_coll.find().each do |it|
      _has = nodes.find{|item| item =~ /^#{it['name']}/}
      `sudo #{@torque_home}/bin/qmgr -c "create node #{it['name']}"` unless _has
      if it['changed'] == 1
        `sudo #{@torque_home}/bin/qmgr -c "delete node #{it['name']}"`
        `sudo #{@torque_home}/bin/qmgr -c "create node #{it['name']}"`
        hosts_coll.update({"_id" => it["_id"]}, {"$set" => {"changed" => 0}})
      end
    end
end

def sync_to_etchosts( hosts_coll )
    hosts_file = open("/etc/hosts", 'r')
    lines = hosts_file.read.split(/\n/)
    hosts_file.close
    hosts_file = open("/etc/hosts", 'w+')
    preserved_lines, has_preserved_line = "", false
    lines.each do |line|
      _hostname = line.split.last || ''
      _has = hosts_coll.find("name" => _hostname).count
      preserved_lines += line + "\n" unless _has > 0
      if line =~ /^# inters hosts$/
        has_preserved_line = true; break
      end
    end
    hosts_file.puts(preserved_lines)
    hosts_file.puts("# inters hosts") unless has_preserved_line
    hosts_coll.find().each do |it|
      hosts_file.puts("#{it['ip']} #{it['namef']} #{it['name']}")
    end
    hosts_file.close
end

case operation
  when 'put'
    put( hosts_coll )
  when 'get'
    get( hosts_coll )
  when 'sync_to_torque'
    sync_to_torque( hosts_coll, torque_nodes_file )
  when 'sync_to_etchosts'
    sync_to_etchosts( hosts_coll )
end

